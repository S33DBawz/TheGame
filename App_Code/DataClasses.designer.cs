#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertCharacter(Character instance);
  partial void UpdateCharacter(Character instance);
  partial void DeleteCharacter(Character instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertClass(Class instance);
  partial void UpdateClass(Class instance);
  partial void DeleteClass(Class instance);
  partial void InsertClassesStat(ClassesStat instance);
  partial void UpdateClassesStat(ClassesStat instance);
  partial void DeleteClassesStat(ClassesStat instance);
  partial void InsertItem(Item instance);
  partial void UpdateItem(Item instance);
  partial void DeleteItem(Item instance);
  partial void InsertItemSlot(ItemSlot instance);
  partial void UpdateItemSlot(ItemSlot instance);
  partial void DeleteItemSlot(ItemSlot instance);
  partial void InsertItemType(ItemType instance);
  partial void UpdateItemType(ItemType instance);
  partial void DeleteItemType(ItemType instance);
  partial void InsertRace(Race instance);
  partial void UpdateRace(Race instance);
  partial void DeleteRace(Race instance);
  partial void InsertStatType(StatType instance);
  partial void UpdateStatType(StatType instance);
  partial void DeleteStatType(StatType instance);
  partial void InsertStat(Stat instance);
  partial void UpdateStat(Stat instance);
  partial void DeleteStat(Stat instance);
  partial void InsertitemsStat(itemsStat instance);
  partial void UpdateitemsStat(itemsStat instance);
  partial void DeleteitemsStat(itemsStat instance);
  partial void InsertLevel(Level instance);
  partial void UpdateLevel(Level instance);
  partial void DeleteLevel(Level instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Character> Characters
	{
		get
		{
			return this.GetTable<Character>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<Class> Classes
	{
		get
		{
			return this.GetTable<Class>();
		}
	}
	
	public System.Data.Linq.Table<ClassesStat> ClassesStats
	{
		get
		{
			return this.GetTable<ClassesStat>();
		}
	}
	
	public System.Data.Linq.Table<Item> Items
	{
		get
		{
			return this.GetTable<Item>();
		}
	}
	
	public System.Data.Linq.Table<ItemSlot> ItemSlots
	{
		get
		{
			return this.GetTable<ItemSlot>();
		}
	}
	
	public System.Data.Linq.Table<ItemType> ItemTypes
	{
		get
		{
			return this.GetTable<ItemType>();
		}
	}
	
	public System.Data.Linq.Table<Race> Races
	{
		get
		{
			return this.GetTable<Race>();
		}
	}
	
	public System.Data.Linq.Table<StatType> StatTypes
	{
		get
		{
			return this.GetTable<StatType>();
		}
	}
	
	public System.Data.Linq.Table<Stat> Stats
	{
		get
		{
			return this.GetTable<Stat>();
		}
	}
	
	public System.Data.Linq.Table<itemsStat> itemsStats
	{
		get
		{
			return this.GetTable<itemsStat>();
		}
	}
	
	public System.Data.Linq.Table<Level> Levels
	{
		get
		{
			return this.GetTable<Level>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Characters")]
public partial class Character : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private int _Race;
	
	private int _Class;
	
	private int _Level;
	
	private int _Experience;
	
	private int _Currency;
	
	private int _User;
	
	private EntityRef<User> _User1;
	
	private EntityRef<Class> _Class1;
	
	private EntityRef<Race> _Race1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRaceChanging(int value);
    partial void OnRaceChanged();
    partial void OnClassChanging(int value);
    partial void OnClassChanged();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnExperienceChanging(int value);
    partial void OnExperienceChanged();
    partial void OnCurrencyChanging(int value);
    partial void OnCurrencyChanged();
    partial void OnUserChanging(int value);
    partial void OnUserChanged();
    #endregion
	
	public Character()
	{
		this._User1 = default(EntityRef<User>);
		this._Class1 = default(EntityRef<Class>);
		this._Race1 = default(EntityRef<Race>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Race", DbType="Int NOT NULL")]
	public int Race
	{
		get
		{
			return this._Race;
		}
		set
		{
			if ((this._Race != value))
			{
				if (this._Race1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRaceChanging(value);
				this.SendPropertyChanging();
				this._Race = value;
				this.SendPropertyChanged("Race");
				this.OnRaceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="Int NOT NULL")]
	public int Class
	{
		get
		{
			return this._Class;
		}
		set
		{
			if ((this._Class != value))
			{
				if (this._Class1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassChanging(value);
				this.SendPropertyChanging();
				this._Class = value;
				this.SendPropertyChanged("Class");
				this.OnClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL")]
	public int Level
	{
		get
		{
			return this._Level;
		}
		set
		{
			if ((this._Level != value))
			{
				this.OnLevelChanging(value);
				this.SendPropertyChanging();
				this._Level = value;
				this.SendPropertyChanged("Level");
				this.OnLevelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experience", DbType="Int NOT NULL")]
	public int Experience
	{
		get
		{
			return this._Experience;
		}
		set
		{
			if ((this._Experience != value))
			{
				this.OnExperienceChanging(value);
				this.SendPropertyChanging();
				this._Experience = value;
				this.SendPropertyChanged("Experience");
				this.OnExperienceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="Int NOT NULL")]
	public int Currency
	{
		get
		{
			return this._Currency;
		}
		set
		{
			if ((this._Currency != value))
			{
				this.OnCurrencyChanging(value);
				this.SendPropertyChanging();
				this._Currency = value;
				this.SendPropertyChanged("Currency");
				this.OnCurrencyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[User]", Storage="_User", DbType="Int NOT NULL")]
	public int User
	{
		get
		{
			return this._User;
		}
		set
		{
			if ((this._User != value))
			{
				this.OnUserChanging(value);
				this.SendPropertyChanging();
				this._User = value;
				this.SendPropertyChanged("User");
				this.OnUserChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Character", Storage="_User1", ThisKey="User", OtherKey="Id", IsForeignKey=true)]
	public User User1
	{
		get
		{
			return this._User1.Entity;
		}
		set
		{
			User previousValue = this._User1.Entity;
			if (((previousValue != value) 
						|| (this._User1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User1.Entity = null;
					previousValue.Characters.Remove(this);
				}
				this._User1.Entity = value;
				if ((value != null))
				{
					value.Characters.Add(this);
					this._User = value.Id;
				}
				else
				{
					this._User = default(int);
				}
				this.SendPropertyChanged("User1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Character", Storage="_Class1", ThisKey="Class", OtherKey="Id", IsForeignKey=true)]
	public Class Class1
	{
		get
		{
			return this._Class1.Entity;
		}
		set
		{
			Class previousValue = this._Class1.Entity;
			if (((previousValue != value) 
						|| (this._Class1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Class1.Entity = null;
					previousValue.Characters.Remove(this);
				}
				this._Class1.Entity = value;
				if ((value != null))
				{
					value.Characters.Add(this);
					this._Class = value.Id;
				}
				else
				{
					this._Class = default(int);
				}
				this.SendPropertyChanged("Class1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_Character", Storage="_Race1", ThisKey="Race", OtherKey="Id", IsForeignKey=true)]
	public Race Race1
	{
		get
		{
			return this._Race1.Entity;
		}
		set
		{
			Race previousValue = this._Race1.Entity;
			if (((previousValue != value) 
						|| (this._Race1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Race1.Entity = null;
					previousValue.Characters.Remove(this);
				}
				this._Race1.Entity = value;
				if ((value != null))
				{
					value.Characters.Add(this);
					this._Race = value.Id;
				}
				else
				{
					this._Race = default(int);
				}
				this.SendPropertyChanged("Race1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Email;
	
	private string _Password;
	
	private int _Role;
	
	private EntitySet<Character> _Characters;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    #endregion
	
	public User()
	{
		this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int NOT NULL")]
	public int Role
	{
		get
		{
			return this._Role;
		}
		set
		{
			if ((this._Role != value))
			{
				this.OnRoleChanging(value);
				this.SendPropertyChanging();
				this._Role = value;
				this.SendPropertyChanged("Role");
				this.OnRoleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Character", Storage="_Characters", ThisKey="Id", OtherKey="User")]
	public EntitySet<Character> Characters
	{
		get
		{
			return this._Characters;
		}
		set
		{
			this._Characters.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Characters(Character entity)
	{
		this.SendPropertyChanging();
		entity.User1 = this;
	}
	
	private void detach_Characters(Character entity)
	{
		this.SendPropertyChanging();
		entity.User1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classes")]
public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Description;
	
	private int _MainStat;
	
	private EntitySet<Character> _Characters;
	
	private EntitySet<ClassesStat> _ClassesStats;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMainStatChanging(int value);
    partial void OnMainStatChanged();
    #endregion
	
	public Class()
	{
		this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
		this._ClassesStats = new EntitySet<ClassesStat>(new Action<ClassesStat>(this.attach_ClassesStats), new Action<ClassesStat>(this.detach_ClassesStats));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MainStat", DbType="Int NOT NULL")]
	public int MainStat
	{
		get
		{
			return this._MainStat;
		}
		set
		{
			if ((this._MainStat != value))
			{
				this.OnMainStatChanging(value);
				this.SendPropertyChanging();
				this._MainStat = value;
				this.SendPropertyChanged("MainStat");
				this.OnMainStatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Character", Storage="_Characters", ThisKey="Id", OtherKey="Class")]
	public EntitySet<Character> Characters
	{
		get
		{
			return this._Characters;
		}
		set
		{
			this._Characters.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassesStat", Storage="_ClassesStats", ThisKey="Id", OtherKey="Class")]
	public EntitySet<ClassesStat> ClassesStats
	{
		get
		{
			return this._ClassesStats;
		}
		set
		{
			this._ClassesStats.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Characters(Character entity)
	{
		this.SendPropertyChanging();
		entity.Class1 = this;
	}
	
	private void detach_Characters(Character entity)
	{
		this.SendPropertyChanging();
		entity.Class1 = null;
	}
	
	private void attach_ClassesStats(ClassesStat entity)
	{
		this.SendPropertyChanging();
		entity.Class1 = this;
	}
	
	private void detach_ClassesStats(ClassesStat entity)
	{
		this.SendPropertyChanging();
		entity.Class1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClassesStats")]
public partial class ClassesStat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _Class;
	
	private int _Stat;
	
	private int _Value;
	
	private EntityRef<Class> _Class1;
	
	private EntityRef<Stat> _Stat1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClassChanging(int value);
    partial void OnClassChanged();
    partial void OnStatChanging(int value);
    partial void OnStatChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
	
	public ClassesStat()
	{
		this._Class1 = default(EntityRef<Class>);
		this._Stat1 = default(EntityRef<Stat>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="Int NOT NULL")]
	public int Class
	{
		get
		{
			return this._Class;
		}
		set
		{
			if ((this._Class != value))
			{
				if (this._Class1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassChanging(value);
				this.SendPropertyChanging();
				this._Class = value;
				this.SendPropertyChanged("Class");
				this.OnClassChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stat", DbType="Int NOT NULL")]
	public int Stat
	{
		get
		{
			return this._Stat;
		}
		set
		{
			if ((this._Stat != value))
			{
				if (this._Stat1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatChanging(value);
				this.SendPropertyChanging();
				this._Stat = value;
				this.SendPropertyChanged("Stat");
				this.OnStatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
	public int Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassesStat", Storage="_Class1", ThisKey="Class", OtherKey="Id", IsForeignKey=true)]
	public Class Class1
	{
		get
		{
			return this._Class1.Entity;
		}
		set
		{
			Class previousValue = this._Class1.Entity;
			if (((previousValue != value) 
						|| (this._Class1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Class1.Entity = null;
					previousValue.ClassesStats.Remove(this);
				}
				this._Class1.Entity = value;
				if ((value != null))
				{
					value.ClassesStats.Add(this);
					this._Class = value.Id;
				}
				else
				{
					this._Class = default(int);
				}
				this.SendPropertyChanged("Class1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stat_ClassesStat", Storage="_Stat1", ThisKey="Stat", OtherKey="Id", IsForeignKey=true)]
	public Stat Stat1
	{
		get
		{
			return this._Stat1.Entity;
		}
		set
		{
			Stat previousValue = this._Stat1.Entity;
			if (((previousValue != value) 
						|| (this._Stat1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Stat1.Entity = null;
					previousValue.ClassesStats.Remove(this);
				}
				this._Stat1.Entity = value;
				if ((value != null))
				{
					value.ClassesStats.Add(this);
					this._Stat = value.Id;
				}
				else
				{
					this._Stat = default(int);
				}
				this.SendPropertyChanged("Stat1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private int _ItemSlot;
	
	private int _ItemType;
	
	private string _Description;
	
	private int _CurrencyValue;
	
	private System.Nullable<int> _Position;
	
	private EntitySet<itemsStat> _itemsStats;
	
	private EntityRef<ItemSlot> _ItemSlot1;
	
	private EntityRef<ItemType> _ItemType1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnItemSlotChanging(int value);
    partial void OnItemSlotChanged();
    partial void OnItemTypeChanging(int value);
    partial void OnItemTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCurrencyValueChanging(int value);
    partial void OnCurrencyValueChanged();
    partial void OnPositionChanging(System.Nullable<int> value);
    partial void OnPositionChanged();
    #endregion
	
	public Item()
	{
		this._itemsStats = new EntitySet<itemsStat>(new Action<itemsStat>(this.attach_itemsStats), new Action<itemsStat>(this.detach_itemsStats));
		this._ItemSlot1 = default(EntityRef<ItemSlot>);
		this._ItemType1 = default(EntityRef<ItemType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSlot", DbType="Int NOT NULL")]
	public int ItemSlot
	{
		get
		{
			return this._ItemSlot;
		}
		set
		{
			if ((this._ItemSlot != value))
			{
				if (this._ItemSlot1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemSlotChanging(value);
				this.SendPropertyChanging();
				this._ItemSlot = value;
				this.SendPropertyChanged("ItemSlot");
				this.OnItemSlotChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType", DbType="Int NOT NULL")]
	public int ItemType
	{
		get
		{
			return this._ItemType;
		}
		set
		{
			if ((this._ItemType != value))
			{
				if (this._ItemType1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemTypeChanging(value);
				this.SendPropertyChanging();
				this._ItemType = value;
				this.SendPropertyChanged("ItemType");
				this.OnItemTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyValue", DbType="Int NOT NULL")]
	public int CurrencyValue
	{
		get
		{
			return this._CurrencyValue;
		}
		set
		{
			if ((this._CurrencyValue != value))
			{
				this.OnCurrencyValueChanging(value);
				this.SendPropertyChanging();
				this._CurrencyValue = value;
				this.SendPropertyChanged("CurrencyValue");
				this.OnCurrencyValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int")]
	public System.Nullable<int> Position
	{
		get
		{
			return this._Position;
		}
		set
		{
			if ((this._Position != value))
			{
				this.OnPositionChanging(value);
				this.SendPropertyChanging();
				this._Position = value;
				this.SendPropertyChanged("Position");
				this.OnPositionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_itemsStat", Storage="_itemsStats", ThisKey="Id", OtherKey="Item")]
	public EntitySet<itemsStat> itemsStats
	{
		get
		{
			return this._itemsStats;
		}
		set
		{
			this._itemsStats.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemSlot_Item", Storage="_ItemSlot1", ThisKey="ItemSlot", OtherKey="Id", IsForeignKey=true)]
	public ItemSlot ItemSlot1
	{
		get
		{
			return this._ItemSlot1.Entity;
		}
		set
		{
			ItemSlot previousValue = this._ItemSlot1.Entity;
			if (((previousValue != value) 
						|| (this._ItemSlot1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ItemSlot1.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._ItemSlot1.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._ItemSlot = value.Id;
				}
				else
				{
					this._ItemSlot = default(int);
				}
				this.SendPropertyChanged("ItemSlot1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_Item", Storage="_ItemType1", ThisKey="ItemType", OtherKey="Id", IsForeignKey=true)]
	public ItemType ItemType1
	{
		get
		{
			return this._ItemType1.Entity;
		}
		set
		{
			ItemType previousValue = this._ItemType1.Entity;
			if (((previousValue != value) 
						|| (this._ItemType1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ItemType1.Entity = null;
					previousValue.Items.Remove(this);
				}
				this._ItemType1.Entity = value;
				if ((value != null))
				{
					value.Items.Add(this);
					this._ItemType = value.Id;
				}
				else
				{
					this._ItemType = default(int);
				}
				this.SendPropertyChanged("ItemType1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_itemsStats(itemsStat entity)
	{
		this.SendPropertyChanging();
		entity.Item1 = this;
	}
	
	private void detach_itemsStats(itemsStat entity)
	{
		this.SendPropertyChanging();
		entity.Item1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemSlots")]
public partial class ItemSlot : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Slot;
	
	private EntitySet<Item> _Items;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSlotChanging(string value);
    partial void OnSlotChanged();
    #endregion
	
	public ItemSlot()
	{
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Slot", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Slot
	{
		get
		{
			return this._Slot;
		}
		set
		{
			if ((this._Slot != value))
			{
				this.OnSlotChanging(value);
				this.SendPropertyChanging();
				this._Slot = value;
				this.SendPropertyChanged("Slot");
				this.OnSlotChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemSlot_Item", Storage="_Items", ThisKey="Id", OtherKey="ItemSlot")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.ItemSlot1 = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.ItemSlot1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemTypes")]
public partial class ItemType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Type;
	
	private EntitySet<Item> _Items;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
	
	public ItemType()
	{
		this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_Item", Storage="_Items", ThisKey="Id", OtherKey="ItemType")]
	public EntitySet<Item> Items
	{
		get
		{
			return this._Items;
		}
		set
		{
			this._Items.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.ItemType1 = this;
	}
	
	private void detach_Items(Item entity)
	{
		this.SendPropertyChanging();
		entity.ItemType1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Races")]
public partial class Race : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Description;
	
	private EntitySet<Character> _Characters;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Race()
	{
		this._Characters = new EntitySet<Character>(new Action<Character>(this.attach_Characters), new Action<Character>(this.detach_Characters));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_Character", Storage="_Characters", ThisKey="Id", OtherKey="Race")]
	public EntitySet<Character> Characters
	{
		get
		{
			return this._Characters;
		}
		set
		{
			this._Characters.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Characters(Character entity)
	{
		this.SendPropertyChanging();
		entity.Race1 = this;
	}
	
	private void detach_Characters(Character entity)
	{
		this.SendPropertyChanging();
		entity.Race1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatTypes")]
public partial class StatType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Type;
	
	private EntitySet<Stat> _Stats;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
	
	public StatType()
	{
		this._Stats = new EntitySet<Stat>(new Action<Stat>(this.attach_Stats), new Action<Stat>(this.detach_Stats));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_Stat", Storage="_Stats", ThisKey="Id", OtherKey="StatType")]
	public EntitySet<Stat> Stats
	{
		get
		{
			return this._Stats;
		}
		set
		{
			this._Stats.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Stats(Stat entity)
	{
		this.SendPropertyChanging();
		entity.StatType1 = this;
	}
	
	private void detach_Stats(Stat entity)
	{
		this.SendPropertyChanging();
		entity.StatType1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stats")]
public partial class Stat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private int _StatType;
	
	private EntitySet<ClassesStat> _ClassesStats;
	
	private EntitySet<itemsStat> _itemsStats;
	
	private EntityRef<StatType> _StatType1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStatTypeChanging(int value);
    partial void OnStatTypeChanged();
    #endregion
	
	public Stat()
	{
		this._ClassesStats = new EntitySet<ClassesStat>(new Action<ClassesStat>(this.attach_ClassesStats), new Action<ClassesStat>(this.detach_ClassesStats));
		this._itemsStats = new EntitySet<itemsStat>(new Action<itemsStat>(this.attach_itemsStats), new Action<itemsStat>(this.detach_itemsStats));
		this._StatType1 = default(EntityRef<StatType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatType", DbType="Int NOT NULL")]
	public int StatType
	{
		get
		{
			return this._StatType;
		}
		set
		{
			if ((this._StatType != value))
			{
				if (this._StatType1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatTypeChanging(value);
				this.SendPropertyChanging();
				this._StatType = value;
				this.SendPropertyChanged("StatType");
				this.OnStatTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stat_ClassesStat", Storage="_ClassesStats", ThisKey="Id", OtherKey="Stat")]
	public EntitySet<ClassesStat> ClassesStats
	{
		get
		{
			return this._ClassesStats;
		}
		set
		{
			this._ClassesStats.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stat_itemsStat", Storage="_itemsStats", ThisKey="Id", OtherKey="Stat")]
	public EntitySet<itemsStat> itemsStats
	{
		get
		{
			return this._itemsStats;
		}
		set
		{
			this._itemsStats.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatType_Stat", Storage="_StatType1", ThisKey="StatType", OtherKey="Id", IsForeignKey=true)]
	public StatType StatType1
	{
		get
		{
			return this._StatType1.Entity;
		}
		set
		{
			StatType previousValue = this._StatType1.Entity;
			if (((previousValue != value) 
						|| (this._StatType1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._StatType1.Entity = null;
					previousValue.Stats.Remove(this);
				}
				this._StatType1.Entity = value;
				if ((value != null))
				{
					value.Stats.Add(this);
					this._StatType = value.Id;
				}
				else
				{
					this._StatType = default(int);
				}
				this.SendPropertyChanged("StatType1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClassesStats(ClassesStat entity)
	{
		this.SendPropertyChanging();
		entity.Stat1 = this;
	}
	
	private void detach_ClassesStats(ClassesStat entity)
	{
		this.SendPropertyChanging();
		entity.Stat1 = null;
	}
	
	private void attach_itemsStats(itemsStat entity)
	{
		this.SendPropertyChanging();
		entity.Stat1 = this;
	}
	
	private void detach_itemsStats(itemsStat entity)
	{
		this.SendPropertyChanging();
		entity.Stat1 = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.itemsStats")]
public partial class itemsStat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _Item;
	
	private int _Stat;
	
	private int _Value;
	
	private EntityRef<Item> _Item1;
	
	private EntityRef<Stat> _Stat1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemChanging(int value);
    partial void OnItemChanged();
    partial void OnStatChanging(int value);
    partial void OnStatChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    #endregion
	
	public itemsStat()
	{
		this._Item1 = default(EntityRef<Item>);
		this._Stat1 = default(EntityRef<Stat>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item", DbType="Int NOT NULL")]
	public int Item
	{
		get
		{
			return this._Item;
		}
		set
		{
			if ((this._Item != value))
			{
				if (this._Item1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnItemChanging(value);
				this.SendPropertyChanging();
				this._Item = value;
				this.SendPropertyChanged("Item");
				this.OnItemChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stat", DbType="Int NOT NULL")]
	public int Stat
	{
		get
		{
			return this._Stat;
		}
		set
		{
			if ((this._Stat != value))
			{
				if (this._Stat1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStatChanging(value);
				this.SendPropertyChanging();
				this._Stat = value;
				this.SendPropertyChanged("Stat");
				this.OnStatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
	public int Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_itemsStat", Storage="_Item1", ThisKey="Item", OtherKey="Id", IsForeignKey=true)]
	public Item Item1
	{
		get
		{
			return this._Item1.Entity;
		}
		set
		{
			Item previousValue = this._Item1.Entity;
			if (((previousValue != value) 
						|| (this._Item1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Item1.Entity = null;
					previousValue.itemsStats.Remove(this);
				}
				this._Item1.Entity = value;
				if ((value != null))
				{
					value.itemsStats.Add(this);
					this._Item = value.Id;
				}
				else
				{
					this._Item = default(int);
				}
				this.SendPropertyChanged("Item1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stat_itemsStat", Storage="_Stat1", ThisKey="Stat", OtherKey="Id", IsForeignKey=true)]
	public Stat Stat1
	{
		get
		{
			return this._Stat1.Entity;
		}
		set
		{
			Stat previousValue = this._Stat1.Entity;
			if (((previousValue != value) 
						|| (this._Stat1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Stat1.Entity = null;
					previousValue.itemsStats.Remove(this);
				}
				this._Stat1.Entity = value;
				if ((value != null))
				{
					value.itemsStats.Add(this);
					this._Stat = value.Id;
				}
				else
				{
					this._Stat = default(int);
				}
				this.SendPropertyChanged("Stat1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Levels")]
public partial class Level : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _Value;
	
	private int _Experience;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(int value);
    partial void OnValueChanged();
    partial void OnExperienceChanging(int value);
    partial void OnExperienceChanged();
    #endregion
	
	public Level()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
	public int Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experience", DbType="Int NOT NULL")]
	public int Experience
	{
		get
		{
			return this._Experience;
		}
		set
		{
			if ((this._Experience != value))
			{
				this.OnExperienceChanging(value);
				this.SendPropertyChanging();
				this._Experience = value;
				this.SendPropertyChanged("Experience");
				this.OnExperienceChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
